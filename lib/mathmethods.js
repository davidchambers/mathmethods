// Generated by CoffeeScript 1.3.3
(function() {
  var addGetter, addMethod, defineProperty, fn, getters, methods, name, numberProto, _i, _j, _len, _len1,
    __slice = [].slice;

  numberProto = Number.prototype;

  defineProperty = Object.defineProperty;

  if (defineProperty == null) {
    defineProperty = function(object, name, descriptor) {
      return object.__defineGetter__(name, descriptor.get);
    };
  }

  addGetter = function(name, fn) {
    var get;
    get = name === 'random' ? function() {
      return this * fn();
    } : function() {
      return fn(this);
    };
    return defineProperty(numberProto, name, {
      get: get
    });
  };

  addMethod = function(name, fn) {
    return Number.prototype[name] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.apply(Math, [this].concat(args));
    };
  };

  getters = ['abs', 'acos', 'asin', 'atan', 'ceil', 'cos', 'exp', 'floor', 'log', 'random', 'round', 'sin', 'sqrt', 'tan'];

  methods = ['atan2', 'max', 'min', 'pow'];

  defineProperty(numberProto, 'squared', {
    get: function() {
      return this.pow(2);
    }
  });

  defineProperty(numberProto, 'cubed', {
    get: function() {
      return this.pow(3);
    }
  });

  defineProperty(numberProto, 'fact', {
    get: function() {
      var n, product;
      n = +this;
      if (n < 0) {
        throw new RangeError("" + n + " is not positive");
      }
      if (n !== (n | 0)) {
        throw new TypeError("" + n + " is not an integer");
      }
      product = 1;
      while (n) {
        product *= n--;
      }
      return product;
    }
  });

  defineProperty(numberProto, 'radiusToArea', {
    get: function() {
        return ((this.pow(2)) * Math.PI);
    }
  });

  defineProperty(numberProto, 'diameterToCircumference', {
    get: function() {
        return (this * Math.PI);
    }
  });

  for (_i = 0, _len = getters.length; _i < _len; _i++) {
    name = getters[_i];
    if (typeof (fn = Math[name]) === 'function') {
      addGetter(name, fn);
    }
  }

  for (_j = 0, _len1 = methods.length; _j < _len1; _j++) {
    name = methods[_j];
    if (typeof (fn = Math[name]) === 'function') {
      addMethod(name, fn);
    }
  }

}).call(this);
